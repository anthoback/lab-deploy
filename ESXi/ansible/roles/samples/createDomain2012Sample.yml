
- name: Check if existing directory
  win_stat:
    path: 'c:\lab-deploy'
  register: dir

- name: Git clone repo
  win_shell: git clone https://github.com/anthoback/lab-deploy.git
  args:
    chdir: 'c:\'
  register: cloning
  when: not dir.stat.exists

- debug: msg="{{ cloning.stdout }}"
  
- name: Copy scripts to c:\vagrant
  win_shell: Copy-Item -Recurse c:\lab-deploy\Vagrant c:\vagrant

- name: Download Debug script from master
  win_copy :
   src: ~/DetectionLab/Vagrant/scripts/provision2012R2.ps1
   dest: C:\vagrant\scripts

- name: Download Debug script from master part 2
  win_copy :
   src: ~/DetectionLab/Vagrant/scripts/create-domain2012R2.ps1
   dest: C:\vagrant\scripts

- name: Create the Domain
  win_shell: .\\provision2012R2.ps1 -ip <HostOnlyIP>
  args:
    chdir: 'c:\vagrant\scripts'
  register: domain_creation
  changed_when: "'Status         : Success' in domain_creation.stdout"
  failed_when: "'Exception' in domain_creation.stderr"
  ignore_errors: true

- name: Reboot Afer Domain Creation
  win_reboot:
    msg: "Installing AD. Rebooting..."
    pre_reboot_delay: 15
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Configure OU
  win_shell: .\\configure-ou.ps1 -ip <HostOnlyIP> -dcName <name>
  args:
    chdir: 'c:\vagrant\scripts'
  register: ou_creation
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: windomain.local\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in ou_creation.stderr"
  ignore_errors: true

- debug: msg="{{ ou_creation.stdout_lines }}"

- name: Configure Auditing Policy GPO
  win_shell: .\\configure-AuditingPolicyGPOs.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: audit_policy
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: windomain.local\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in audit_policy.stderr"
  ignore_errors: true

- debug: msg="{{ audit_policy.stdout_lines }}"

- name: Disable Windows Defender GPO
  win_shell: .\\configure-disable-windows-defender-gpo.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: disable_win_def
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: windomain.local\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in disable_win_def.stderr"
  ignore_errors: true

- debug: msg="{{ disable_win_def.stdout_lines }}"

- name: Configure RDP Permissions GPO
  win_shell: .\\configure-rdp-user-gpo.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: rdp_gpo
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: windomain.local\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in rdp_gpo.stderr"
  ignore_errors: true

- debug: msg="{{ rdp_gpo.stdout_lines }}"

- name: Configure Taskbar Layout GPO
  win_shell: .\\configure-taskbar-layout-gpo.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: taskbar_gpo
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: windomain.local\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in taskbar_gpo.stderr"
  ignore_errors: true
  
- debug: msg="{{ taskbar_gpo.stdout_lines }}"


- name: Disable password complexity
  win_shell: |
    secedit /export /cfg c:\secpol.cfg
    (gc C:\secpol.cfg).replace('PasswordComplexity = 1', 'PasswordComplexity = 0') | Out-File C:\secpol.cfg 
    secedit /configure /db c:\windows\security\local.sdb /cfg c:\secpol.cfg /areas SECURITYPOLICY
    rm -force c:\secpol.cfg -confirm:$false
    gpupdate /force

- name: Ajouter utilisateur domain admin
  win_shell: |
    $PASSWORD = ConvertTo-SecureString -AsPlainText -Force -String 'vagrant'
    New-ADUser -Name 'vagrantAdmin' -Description 'domainadmin' -Enabled $true -AccountPassword $PASSWORD -ChangePasswordAtLogon $false -PasswordNeverExpires $true
    Add-ADGroupMember -Identity 'Domain Admins' -Members 'vagrantAdmin'

- name: Configure DC with raw Commands
  win_shell: "{{ item }}"
  with_items:
    - "wevtutil el | Select-String -notmatch \"Microsoft-Windows-LiveId\" | Foreach-Object {wevtutil cl \"$_\"}"
    - "Set-SmbServerConfiguration -AuditSmb1Access $true -Force"

- name: "Set the TimeZone"
  win_timezone:
    timezone: "Romance Standard Time"


